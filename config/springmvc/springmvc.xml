<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
	
	<!-- 该文件需要配置springmvc需要用到的各个组件,如果在此文件中没有配置如下内容，则SpringMVC会默认加载 DispatcherServlet.properties中的内容(位于Spring的webmvc包中)-->
	<!-- 1.HandlerAdapter -->
	<!-- 2.HandlerMapping -->
	<!-- 3.Handler -->
	<!-- 4.ViewResolver -->
	
	<!-- 
		org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver
		
		org.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver
		
		org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\
			org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping
		
		org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\
			org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\
			org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter
		
		org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\
			org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\
			org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver
		
		org.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator
		
		org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver
		
		org.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager
	-->
	<!-- ===================================================================================================================================== -->
	
	
	<!-- 使用注解的映射器和注解的适配器。（注解的映射器和注解的适配器必须配对使用） -->
	<!-- 注解映射器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
	<!-- 注解适配器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> -->
	
	<!-- 
		使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置
		mvc:annotation-driven默认加载很多的参数绑定方法
		比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
		实际开发时使用mvc:annotation-driven
	 -->
	<mvc:annotation-driven conversion-service="conversionService" validator="validator"></mvc:annotation-driven>
	
	<!-- 拦截器 -->
	<mvc:interceptors>
		<!-- 多个拦截器，顺序执行 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.baoxina.web.interceptor.LoginInterceptor"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- /**表示所有url包括子url路径 -->
			<mvc:mapping path="/**"/>
			<bean class="com.baoxina.web.interceptor.HandlerInterceptor1"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.baoxina.web.interceptor.HandlerInterceptor2"/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	
	
	<!-- 文件上传解析器 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置文件上传的最大尺寸为50MB -->
		<property name="maxUploadSize">
			<value>5242880</value>
		</property>
	</bean>
	
	
	<!-- 全局异常处理器 -->
	<!-- 只要实现HandlerExceptionResolver接口就是全局异常处理器(一个系统只有一个异常处理器)，由前端控制器去调用，进行全局统一的异常处理 -->
	<bean class="com.baoxina.web.exception.GlobalExceptionResolver"/>
	
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
		<property name="validationMessageSource" ref="validationMessageSource"/>
	</bean>
	
	<bean id="validationMessageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:validation/items/ItemsValidationMessages</value>
			</list>
		</property>
		<property name="fileEncodings" value="utf-8"/>
		<property name="cacheSeconds" value="20"/>
	</bean>
	
	
	<!-- 自定义参数绑定组件，需要向[处理器适配器]中[注入][自定义参数绑定组件] -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 转换器 -->
		<property name="converters">
			<list>
				<bean class="com.baoxina.web.converter.DateConverter"/>
			</list>
		</property>
	</bean>
	
	<!-- 配置前端控制器的url-parttern中指定/，对静态资源的解析出现问题 ,需要如下配置对静态资源的解析-->
	<!-- 静态资源解析 -->
	<!-- 包括：js、css、img -->
	<mvc:resources location="/js/" mapping="/js/**"/>
	<mvc:resources location="/img/" mapping="/img/**"/>
	
	
	<!-- 可以扫描controller、service、这里让扫描controller，指定controller的包 -->
	<context:component-scan base-package="com.baoxina.web.controller"></context:component-scan>
	
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/"/>
		<!-- 配置jsp路径的后缀 -->
		<property name="suffix" value=".jsp"/>
	</bean>
</beans>